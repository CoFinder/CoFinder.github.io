{"version":3,"sources":["images/Icon_Rounded.png","screens/landing/index.tsx","screens/loading/index.tsx","App.tsx","constants/routes.ts","serviceWorker.js","index.tsx"],"names":["module","exports","LandingScreenBase","props","Container","className","fluid","style","minHeight","background","Row","Col","md","size","offset","maxHeight","marginBottom","src","require","Component","LandingScreen","compose","withRouter","LoadingScreen","Spinner","width","height","color","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,0C,4OCWrCC,E,YAEF,WAAYC,GAAe,qEACjBA,I,sEAIN,OAAQ,kBAACC,EAAA,EAAD,CAAWC,UAAU,4CAA4CC,OAAK,EAACC,MAAO,CAAEC,UAAW,QAASC,WAAY,YACpH,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,yBAAKT,UAAU,iCACX,yBAAKE,MAAO,CAAEQ,UAAW,OAAQC,aAAc,GAAKC,IAAKC,EAAQ,c,GAXzDC,aAqBjBC,EADOC,YAAmBC,IAAnBD,CAA+BnB,G,QCVtCqB,E,iLAfP,OAAQ,kBAACnB,EAAA,EAAD,CAAWC,UAAU,4CAA4CC,OAAK,EAACC,MAAO,CAAEC,UAAW,QAASC,WAAY,YACpH,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACxB,yBAAKT,UAAU,iCACX,yBAAKE,MAAO,CAAEQ,UAAW,OAAQC,aAAc,GAAKC,IAAKC,EAAQ,OAErE,yBAAKb,UAAU,iCACX,kBAACmB,EAAA,EAAD,CAASjB,MAAO,CAAEkB,MAAO,QAASC,OAAQ,QAASC,MAAO,WAAc,Y,GAVpER,aCsBbS,E,YAdb,aAAe,qEACP,K,sEAIN,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KClBE,IDkBqBC,UAAWX,IAC/C,kBAAC,IAAD,CAAOS,OAAK,EAACC,KClBE,WDkBoBC,UAAWR,S,GAVpCJ,aEGEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ea3f550f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icon_Rounded.a19e59f0.png\";","import React, { Component, FunctionComponent } from 'react';\nimport { compose } from 'recompose'\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport { Container, Row, Col, Spinner } from 'reactstrap'\n\n\nimport LoadingScreen from '../loading';\n\ninterface Props extends RouteComponentProps { }\n\nclass LandingScreenBase extends Component<Props, {}> {\n\n    constructor(props: Props) {\n        super(props)\n    }\n\n    render() {\n        return (<Container className=\"d-flex flex-column justify-content-center\" fluid style={{ minHeight: '100vh', background: '#2ca8d3' }}>\n            <Row>\n                <Col md={{ size: 6, offset: 3 }}>\n                    <div className=\"d-flex justify-content-center\">\n                        <img style={{ maxHeight: '20vh', marginBottom: 5 }} src={require('../../images/Icon_Rounded.png')}/>\n                    </div>\n                </Col>\n            </Row>\n        </Container>)\n    }\n\n}\n\nconst LandingScreen = compose<Props, {}>(withRouter)(LandingScreenBase);\nexport default LandingScreen","import React, { Component } from 'react';\nimport { Container, Row, Col, Spinner } from 'reactstrap'\n\nclass LoadingScreen extends Component {\n\n    render() {\n        return (<Container className=\"d-flex flex-column justify-content-center\" fluid style={{ minHeight: '100vh', background: '#2ca8d3' }}>\n            <Row>\n                <Col md={{ size: 6, offset: 3 }}>\n                    <div className=\"d-flex justify-content-center\">\n                        <img style={{ maxHeight: '20vh', marginBottom: 5 }} src={require('../../images/Icon_Rounded.png')}/>\n                    </div>\n                    <div className=\"d-flex justify-content-center\">\n                        <Spinner style={{ width: '10rem', height: '10rem', color: 'white' }} />{' '}\n                    </div>\n                </Col>\n            </Row>\n        </Container>)\n    }\n}\n\nexport default LoadingScreen;","import React, { Component, FunctionComponent } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport LandingScreen from './screens/landing'\nimport LoadingScreen from './screens/loading';\n\nimport * as ROUTES from './constants/routes'\n\nclass App extends Component<{}, {}> {\n\n  constructor() {\n    super({})\n  }\n\n  render() {\n    return (\n      <Router>\n        <Route exact path={ROUTES.LANDING}  component={LandingScreen} />\n        <Route exact path={ROUTES.LOADING} component={LoadingScreen} />\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","export const LANDING = '/'\nexport const LOADING = '/loading'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}